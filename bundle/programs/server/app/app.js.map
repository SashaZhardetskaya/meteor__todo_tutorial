{"version":3,"sources":["meteor://ðŸ’»app/imports/api/tasks.js","meteor://ðŸ’»app/server/main.js"],"names":["module","export","Tasks","Meteor","watch","require","v","Mongo","check","Collection","isServer","publish","tasksPublication","find","$or","private","$ne","owner","userId","methods","text","String","Error","insert","createdAt","Date","username","users","findOne","taskId","task","remove","setChecked","Boolean","update","$set","checked","setToPrivate"],"mappings":"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","file":"/app.js","sourcesContent":["import { Meteor } from 'meteor/meteor';\nimport { Mongo } from 'meteor/mongo';\nimport { check } from 'meteor/check';\n\n\nexport const Tasks = new Mongo.Collection('tasks');\n\nif (Meteor.isServer) {\n    // This code only runs on the server\n    // Only publish tasks that are public or belong to the current user\n\n    Meteor.publish('tasks', function tasksPublication() {\n        // return Tasks.find();\n        return Tasks.find({\n            $or: [\n                { private: { $ne: true } },\n                { owner: this.userId },\n            ],\n        });\n    });\n}\n\nMeteor.methods({\n    'tasks.insert'(text) {\n        check(text, String);\n\n        // Make sure the user is logged in before inserting a task\n        if (! this.userId) {\n            throw new Meteor.Error('not-authorized');\n        }\n\n        Tasks.insert({\n            text,\n            createdAt: new Date(),\n            owner: this.userId,\n            username: Meteor.users.findOne(this.userId).username,\n        });\n    },\n    'tasks.remove'(taskId) {\n        check(taskId, String);\n        const task = Tasks.findOne(taskId);\n        if (task.private && task.owner !== this.userId) {\n            // If the task is private, make sure only the owner can delete it\n            throw new Meteor.Error('not-authorized');\n        }\n        Tasks.remove(taskId);\n    },\n\n\n    'tasks.setChecked'(taskId, setChecked) {\n        check(taskId, String);\n        check(setChecked, Boolean);\n        const task = Tasks.findOne(taskId);\n        if (task.private && task.owner !== this.userId) {\n            // If the task is private, make sure only the owner can check it off\n            throw new Meteor.Error('not-authorized');\n        }\n        Tasks.update(taskId, { $set: { checked: setChecked } });\n    },\n    'tasks.setPrivate'(taskId, setToPrivate) {\n        check(taskId, String);\n        check(setToPrivate, Boolean);\n\n        const task = Tasks.findOne(taskId);\n\n        // Make sure only the task owner can make a task private\n        if (task.owner !== this.userId) {\n            throw new Meteor.Error('not-authorized');\n        }\n\n        Tasks.update(taskId, { $set: { private: setToPrivate } });\n    },\n});","import '../imports/api/tasks.js';\n"]}